name: Recommendations Service

on:
  pull_request:
  workflow_dispatch:
  push:
    branches: [master]
    paths:
      - "services/recommendations/**"

permissions:
  contents: read
  pull-requests: read

jobs:
  determine_build:
    name: Determine builds to run
    runs-on: ubuntu-latest

    outputs:
      src: ${{ steps.changes.outputs.src }}
      infra: ${{ steps.changes.outputs.infra }}

    steps:
      - id: changes
        name: Paths Changes Filter
        uses: dorny/paths-filter@v2.11.1
        with:
          filters: |
            src:
              - "services/recommendations/*.go"
            infra:
              - "services/recommendations/infra/**"
  test:
    name: Pull Request Test
    needs: determine_build
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && needs.determine_build.outputs.src == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Golang
        uses: actions/setup-go@v2
        with:
          go-version: "1.19"

      - name: Setup protoc
        uses: arduino/setup-protoc@v2.0.0

      - name: Setup
        run: |
           go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28
           go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2

      - name: Install dependencies
        run: go mod download

      - name: Generate protobuf code
        run: go generate ./services/recommendations/...

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3.7.0
        with:
          version: "v1.54"
          working-directory: services/recommendations

      - name: Run tests
        run: go test ./services/recommendations/

      - name: Docker lint
        run: docker build -t testing -f services/recommendations/Dockerfile .

  infra_test:
    name: Infrastructure Test
    needs: determine_build
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && needs.determine_build.outputs.infra == 'true'

    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.5

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform test
        id: fmt
        run: terraform fmt -check=true -diff=true -recursive

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true

      - name: Send message to PR
        uses: actions/github-script@v6
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  build:
    name: Build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - id: auth
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.FIREBASE_SERVICE_ACCOUNT_EXCEL_ACADEMY_ONLINE }}"

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"

      - name: Configure Artifact Registry
        run: gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: Build Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: services/recommendations/Dockerfile
          push: true
          tags: us-central1-docker.pkg.dev/excel-academy-online/services/recommendations:latest

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - id: auth
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.FIREBASE_SERVICE_ACCOUNT_EXCEL_ACADEMY_ONLINE }}"

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.5

      - name: Terraform Init
        run: terraform init
        working-directory: services/recommendations/infra/

      - name: Terraform Plan
        run: terraform plan -no-color
        working-directory: services/recommendations/infra/

      - name: Update Infrastructure
        run: terraform apply -input=false -auto-approve
        working-directory: services/recommendations/infra/
